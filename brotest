local Workspace = game:GetService("Workspace")

game.StarterGui:SetCore("SendNotification", {
    Title = "VIPER Executed",
    Text = "Welcome to VIPER Hub. Enjoy!",
    Duration = 5
})

print("\n" .. [[

██    ██ ██ ██████  ███████ ██████  
██    ██ ██ ██   ██ ██      ██   ██ 
██    ██ ██ ██████  █████   ██████  
 ██  ██  ██ ██      ██      ██   ██ 
  ████   ██ ██      ███████ ██   ██ 

      Loaded Successfully

]])




local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/newredz/RedzLibV5/main/Source.lua"))()

-- Wait until the library is fully loaded
repeat task.wait() until redzlib

-- Create the window
local Window = redzlib:MakeWindow({
    Title = "Nova.GG : Dead-Rails",
    SubTitle = "by Viper x Tanny",
    SaveFolder = "redz Hub | Blox Fruits.lua"
})

-- Correct way to create a tab
local Status = Window:MakeTab({
    Title = "Bypass Main Info",
    Description = "Info",
    Icon = "home",
})

local Notify = Window:MakeTab({
    Title = "Tab Notify Helper",
    Description = "Info",
    Icon = "bell",
})

local Main = Window:MakeTab({
    Title = "Tab Visual",
    Description = "Info",
    Icon = "user",
})

local Aimbot = Window:MakeTab({
    Title = "Tab Aim Helper",
    Description = "Info",
    Icon = "box",
})

local Items = Window:MakeTab({
    Title = "Tab Items Collect",
    Description = "Info",
    Icon = "cherry",
})

local Player = Window:MakeTab({
    Title = "Player",
    Description = "Info",
    Icon = "swords",
})

local Setting = Window:MakeTab({
    Title = "Settings",
    Description = "Settings",
    Icon = "settings",
})

local v22 = Instance.new("ScreenGui")
local v23 = Instance.new("ImageButton")
local v24 = Instance.new("UICorner")
local v25 = Instance.new("ParticleEmitter")
local v26 = game:GetService("TweenService")

v22.Parent = game.CoreGui
v22.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

v23.Parent = v22
v23.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
v23.BorderSizePixel = 0
v23.Position = UDim2.new(0.1, 0, 0.1, 0)  -- Position of the floating button
v23.Size = UDim2.new(0, 50, 0, 50)  -- Size of the floating logo
v23.Draggable = true  -- Makes it draggable
v23.Image = "rbxassetid://101883839381557"  -- Fixed image ID (removed extra digits)

v24.Parent = v23
v24.CornerRadius = UDim.new(1, 0)  -- Round corners

v25.Parent = v23
v25.LightEmission = 1
v25.Size = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.1),
    NumberSequenceKeypoint.new(1, 0)
})
v25.Lifetime = NumberRange.new(0.5, 1)
v25.Rate = 0
v25.Speed = NumberRange.new(5, 10)
v25.Color = ColorSequence.new(Color3.fromRGB(255, 85, 255), Color3.fromRGB(85, 255, 255))  -- Particle colors

-- Animation on button press
v23.MouseButton1Down:Connect(function()
    v25.Rate = 100  -- Start emitting particles
    
    -- Toggle UI visibility
    if Window.Enabled then
        Window:Minimize(true)
    else
        Window:Minimize(false)
    end
    
    task.delay(1, function()
        v25.Rate = 0  -- Stop emitting after 1 second
    end)
end)

-- Optional Tween effect for smooth appearance
local v47 = v26:Create(v23, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
    Position = UDim2.new(0.1, 0, 0.1, 0),
    Size = UDim2.new(0, 50, 0, 50),
    BackgroundTransparency = 0.2
})
v47:Play()

-- Cham Color dropdown
Main:AddDropdown({
    Name = "Esp Color",
    Flag = "Main/ChamColor",
    Default = "Red",
    Options = { "Red", "Blue", "Green", "Yellow", "Purple", "White" },
    Callback = function(option)
        local colors = {
            Red = Color3.fromRGB(255, 0, 0),
            Blue = Color3.fromRGB(0, 0, 255),
            Green = Color3.fromRGB(0, 255, 0),
            Yellow = Color3.fromRGB(255, 255, 0),
            Purple = Color3.fromRGB(170, 0, 255),
            White = Color3.fromRGB(255, 255, 255)
        }
        
        -- Update global ChamColor variable
        getgenv().ChamColor = colors[option] or Color3.fromRGB(255, 0, 0)

        -- Update player chams
        if getgenv().PlayerChams then
            for _, highlight in pairs(getgenv().PlayerChams) do
                if highlight and highlight:IsA("Highlight") then
                    highlight.FillColor = getgenv().ChamColor
                    highlight.OutlineColor = getgenv().ChamColor
                end
            end
        end

        -- Update bank chams
        if getgenv().BankChams then
            for _, highlight in pairs(getgenv().BankChams) do
                if highlight and highlight:IsA("Highlight") then
                    highlight.FillColor = getgenv().ChamColor
                    highlight.OutlineColor = getgenv().ChamColor
                end
            end
        end

        -- Update Train ESP color
        if getgenv().TrainESP then
            for _, highlight in pairs(getgenv().TrainESP) do
                if highlight and highlight:IsA("Highlight") then
                    highlight.FillColor = getgenv().ChamColor
                    highlight.OutlineColor = getgenv().ChamColor
                end
            end
        end

        -- Update Walker ESP color
        if getgenv().WalkerESP then
            for _, highlight in pairs(getgenv().WalkerESP) do
                if highlight and highlight:IsA("Highlight") then
                    highlight.FillColor = getgenv().ChamColor
                    highlight.OutlineColor = getgenv().ChamColor
                end
            end
        end
    end
})

-- Esp Players Toggle
Main:AddToggle({
    Name = "Esp Players",
    Flag = "Visual/EspPlayers",
    Default = false,
    Callback = function(Value)
        getgenv().EspPlayers = Value

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        getgenv().PlayerChams = getgenv().PlayerChams or {}
        local chams = getgenv().PlayerChams

        local function addCham(player)
            if player == LocalPlayer or chams[player] then return end
            local char = player.Character
            if not char or not char:FindFirstChild("HumanoidRootPart") then return end

            local highlight = Instance.new("Highlight")
            highlight.Name = "PlayerCham"
            highlight.FillColor = Color3.fromRGB(255, 0, 0)
            highlight.OutlineColor = Color3.fromRGB(255, 0, 0)
            highlight.FillTransparency = 0.5
            highlight.OutlineTransparency = 0
            highlight.Adornee = char
            highlight.Parent = char

            chams[player] = highlight
        end

        local function removeCham(player)
            if chams[player] then
                chams[player]:Destroy()
                chams[player] = nil
            end
        end

        local function enableChams()
            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer then
                    addCham(player)
                end
                player.CharacterAdded:Connect(function()
                    task.wait(1)
                    if getgenv().EspPlayers then
                        addCham(player)
                    end
                end)
            end

            Players.PlayerAdded:Connect(function(player)
                player.CharacterAdded:Connect(function()
                    task.wait(1)
                    if getgenv().EspPlayers then
                        addCham(player)
                    end
                end)
            end)
        end

        local function disableChams()
            for player, highlight in pairs(chams) do
                if highlight then highlight:Destroy() end
            end
            table.clear(chams)
        end

        if Value then
            enableChams()
        else
            disableChams()
        end
    end
})


Main:AddToggle({
    Name = "ESP Train",
    Flag = "Main/ESPTrain",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Create a table to store the highlights for the train
            getgenv().TrainESP = {}

            -- Loop through the workspace to find the train parts
            local function createTrainESP()
                for _, v in pairs(game.Workspace:GetChildren()) do
                    -- Find the train parts by their names or tags
                    if v:IsA("Model") and v.Name:lower():find("train") then
                        -- If the train part is found, add a highlight
                        local highlight = Instance.new("Highlight")
                        highlight.Parent = v
                        highlight.FillColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                        highlight.FillTransparency = 0.5
                        highlight.OutlineTransparency = 0.7
                        table.insert(getgenv().TrainESP, highlight)
                    end
                end
            end

            -- Continuously check for new trains if they appear in the workspace
            createTrainESP()

            -- Auto refresh ESP for train parts if new ones spawn
            game.Workspace.ChildAdded:Connect(function(child)
                if child:IsA("Model") and child.Name:lower():find("train") then
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = child
                    highlight.FillColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                    highlight.OutlineColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                    highlight.FillTransparency = 0.5
                    highlight.OutlineTransparency = 0.7
                    table.insert(getgenv().TrainESP, highlight)
                end
            end)
        else
            -- Remove ESP highlights when toggled off
            if getgenv().TrainESP then
                for _, highlight in pairs(getgenv().TrainESP) do
                    if highlight then
                        highlight:Destroy()
                    end
                end
                getgenv().TrainESP = nil
            end
        end
    end
})


Main:AddToggle({
    Name = "ESP Bank",
    Flag = "Main/ESPChamBank",
    Default = false,
    Callback = function(Value)
        if Value then
            getgenv().BankChams = {}
            getgenv().ESPChamBankConnection = game:GetService("RunService").RenderStepped:Connect(function()
                for _, obj in pairs(workspace:GetDescendants()) do
                    if obj:IsA("Model") and obj.Name:lower():find("bank") and not obj:FindFirstChild("Cham") then
                        local highlight = Instance.new("Highlight")
                        highlight.Name = "Cham"
                        highlight.FillColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                        highlight.OutlineColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                        highlight.FillTransparency = 0.5
                        highlight.OutlineTransparency = 0
                        highlight.Parent = obj
                        highlight.Adornee = obj
                        table.insert(getgenv().BankChams, highlight)
                    end
                end
            end)
        else
            if getgenv().ESPChamBankConnection then
                getgenv().ESPChamBankConnection:Disconnect()
                getgenv().ESPChamBankConnection = nil
            end
            if getgenv().BankChams then
                for _, cham in pairs(getgenv().BankChams) do
                    if cham and cham.Parent then
                        cham:Destroy()
                    end
                end
                getgenv().BankChams = nil
            end
        end
    end
})


Main:AddToggle({
    Name = "ESP Zombie",
    Flag = "Main/ESPWalker",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Create a table to store the highlights for walkers (NPCs)
            getgenv().WalkerESP = {}

            -- Loop through the workspace to find NPCs (walkers)
            local function createWalkerESP()
                for _, v in pairs(game.Workspace:GetChildren()) do
                    -- Check if the object is a walker NPC (with a humanoid and specific walker name or tag)
                    if v:IsA("Model") and v:FindFirstChild("Humanoid") and v.Name == "Walker" then
                        -- If a walker is found, add a highlight
                        local highlight = Instance.new("Highlight")
                        highlight.Parent = v
                        highlight.FillColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)  -- Use the color from dropdown
                        highlight.OutlineColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                        highlight.FillTransparency = 0.5
                        highlight.OutlineTransparency = 0.7
                        table.insert(getgenv().WalkerESP, highlight)
                    end
                end
            end

            -- Initially create ESP for existing walkers
            createWalkerESP()

            -- Auto refresh ESP for walkers if new ones spawn
            game.Workspace.ChildAdded:Connect(function(child)
                if child:IsA("Model") and child:FindFirstChild("Humanoid") and child.Name == "Walker" then
                    local highlight = Instance.new("Highlight")
                    highlight.Parent = child
                    highlight.FillColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                    highlight.OutlineColor = getgenv().ChamColor or Color3.fromRGB(255, 0, 0)
                    highlight.FillTransparency = 0.5
                    highlight.OutlineTransparency = 0.7
                    table.insert(getgenv().WalkerESP, highlight)
                end
            end)
        else
            -- Remove ESP highlights when toggled off
            if getgenv().WalkerESP then
                for _, highlight in pairs(getgenv().WalkerESP) do
                    if highlight then
                        highlight:Destroy()
                    end
                end
                getgenv().WalkerESP = nil
            end
        end
    end
})

Aimbot:AddSection("Aim Helper");


Aimbot:AddButton({
    Title = "Aimbot + Esp Combo",
    Description = "Recommended Full Aimbot NPC",
    Callback = function()
        -- Execute the script from the URL
        loadstring(game:HttpGet("https://raw.githubusercontent.com/viperobii/ViperisEnot/refs/heads/main/ViperIsGodHehe.txt"))()
        
    end
})

Aimbot:AddSection("Settings Aim");

Aimbot:AddToggle({
    Name = "Anti Skid Aim",
    Flag = "Aimbot/BypassAntiBan",
    Default = true
})

Aimbot:AddToggle({
    Name = "Anti Auto Aim Sky",
    Flag = "Aimbot/BypassAntiBan",
    Default = true
})

Aimbot:AddToggle({
    Name = "Auto Lock Head",
    Flag = "Aimbot/BypassAntiBan",
    Default = true
})

Aimbot:AddToggle({
    Name = "No Recoil",
    Flag = "Aimbot/BypassAntiBan",
    Default = true
})


Main:AddToggle({
    Name = "ESP Objects",
    Flag = "Visual/ESPObjects",
    Default = false,
    Callback = function(ESPValue)
        getgenv().ESPObjects = ESPValue

        local Connection = {}
        local Highlight_Folder = game.CoreGui:FindFirstChild("Highlight_Folder") or Instance.new("Folder")
        Highlight_Folder.Name = "Highlight_Folder"
        Highlight_Folder.Parent = game.CoreGui

        local function Highlight(v)
            if v:FindFirstChild("ObjectInfo") and v.ObjectInfo:FindFirstChild("TextLabel") or v:FindFirstChild("Equippable") then
                local labelText = v.ObjectInfo:FindFirstChild("TextLabel") and v.ObjectInfo.TextLabel.Text or ""
                if string.find(string.lower(labelText), "valuable")
                or string.find(string.lower(labelText), "currency")
                or string.find(string.lower(labelText), "melee")
                or string.find(string.lower(labelText), "gun")
                or string.find(string.lower(labelText), "weapon")
                or string.find(string.lower(labelText), "equippable")
                or string.find(string.lower(labelText), "light source")
                or string.find(string.lower(labelText), "consumable")
                or string.find(string.lower(labelText), "weld to use")
                or string.find(string.lower(labelText), "bulletproof")
                or string.find(string.lower(labelText), "tool")
                or string.find(string.lower(labelText), "attracts lightning but makes it harmless")
                or string.find(string.lower(labelText), "ammo")
                or string.find(string.lower(labelText), "fuel") then

                    local Highlight = Instance.new("Highlight")
                    Highlight.Name = v.Name
                    Highlight.FillColor = Color3.fromRGB(255, 215, 0)
                    Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    Highlight.FillTransparency = 0.7
                    Highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
                    Highlight.Parent = Highlight_Folder

                    local Billboard = Instance.new("BillboardGui")
                    Billboard.Name = "ESP_Billboard"
                    Billboard.Parent = v
                    Billboard.Adornee = v
                    Billboard.Size = UDim2.new(0, 25, 0, 25)
                    Billboard.StudsOffset = Vector3.new(0, 1, 0)
                    Billboard.AlwaysOnTop = true

                    local TextLabel = Instance.new("TextLabel")
                    TextLabel.Parent = Billboard
                    TextLabel.Size = UDim2.new(1, 0, 1, 0)
                    TextLabel.Text = v.Name
                    TextLabel.TextColor3 = Color3.fromRGB(92, 46, 46)
                    TextLabel.TextSize = 10
                    TextLabel.BackgroundTransparency = 1
                    TextLabel.TextStrokeTransparency = 0
                    TextLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

                    if v:IsA("BasePart") then
                        Highlight.Adornee = v
                    elseif v:IsA("Model") then
                        Connection[v] = v.DescendantAdded:Connect(function(Descendant)
                            if Descendant:IsA("BasePart") then
                                Highlight.Adornee = Descendant
                            end
                        end)
                    end
                end
            end
        end

        if ESPValue then
            for _, v in ipairs(workspace.RuntimeItems:GetDescendants()) do
                if v:IsA("Model") or v:IsA("BasePart") then
                    Highlight(v)
                end
            end

            Connection["Added"] = workspace.RuntimeItems.DescendantAdded:Connect(function(v)
                if v:IsA("Model") or v:IsA("BasePart") then
                    Highlight(v)
                end
            end)

            Connection["Removed"] = workspace.RuntimeItems.DescendantRemoving:Connect(function(v)
                if Highlight_Folder:FindFirstChild(v.Name) then
                    Highlight_Folder[v.Name]:Destroy()
                end
                if v:FindFirstChild("ESP_Billboard") then
                    v.ESP_Billboard:Destroy()
                end
                if Connection[v] then
                    Connection[v]:Disconnect()
                    Connection[v] = nil
                end
            end)
        else
            for _, v in ipairs(Highlight_Folder:GetChildren()) do
                v:Destroy()
            end
            for _, v in ipairs(workspace.RuntimeItems:GetDescendants()) do
                if v:FindFirstChild("ESP_Billboard") then
                    v.ESP_Billboard:Destroy()
                end
            end
            for _, v in pairs(Connection) do
                v:Disconnect()
            end
            table.clear(Connection)
        end
    end
})



Items:AddToggle({
    Name = "Auto Collect Items + Guns",
    Flag = "Items/AutoCollectValuableItems",
    Description = "Snake Oi, Bandage, Revolver, Shotgun, Rifle, Newspaper",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoCollectValuableItems then
            getgenv().AutoCollectValuableItems:Disconnect()
            getgenv().AutoCollectValuableItems = nil
        end
        if Value then
            getgenv().AutoCollectValuableItems = game:GetService("RunService").Heartbeat:Connect(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then return end
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not rootPart then return end

                for _, item in ipairs(workspace.RuntimeItems:GetChildren()) do
                    local itemNameList = {"snake oil", "bandage", "revolver", "shotgun", "rifle", "newspaper"}
                    for _, keyword in ipairs(itemNameList) do
                        if string.find(item.Name:lower(), keyword) then
                            local pos = item:IsA("BasePart") and item.Position or (item:IsA("Model") and item:GetPivot().Position)
                            if not pos and item.PrimaryPart then pos = item.PrimaryPart.Position end
                            if pos and (pos - rootPart.Position).Magnitude <= 17 then
                                if item:FindFirstChild("ObjectInfo") and item.ObjectInfo:FindFirstChild("TextLabel") then
                                    if player.Backpack:FindFirstChild("Sack") then
                                        character.Humanoid:EquipTool(player.Backpack:FindFirstChild("Sack"))
                                    end
                                    game.ReplicatedStorage.Remotes.StoreItem:FireServer(item)
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
})


Items:AddToggle({
    Name = "Auto Collect Zombie / Horse Body",
    Flag = "Items/AutoCollectValuableItems",
    Description = "",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoCollectValuableItems then
            getgenv().AutoCollectValuableItems:Disconnect()
            getgenv().AutoCollectValuableItems = nil
        end
        if Value then
            getgenv().AutoCollectValuableItems = game:GetService("RunService").Heartbeat:Connect(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then return end
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not rootPart then return end

                for _, item in ipairs(workspace.RuntimeItems:GetChildren()) do
                    local itemNameList = {"walker", "horse"}
                    for _, keyword in ipairs(itemNameList) do
                        if string.find(item.Name:lower(), keyword) then
                            local pos = item:IsA("BasePart") and item.Position or (item:IsA("Model") and item:GetPivot().Position)
                            if not pos and item.PrimaryPart then pos = item.PrimaryPart.Position end
                            if pos and (pos - rootPart.Position).Magnitude <= 17 then
                                if item:FindFirstChild("ObjectInfo") and item.ObjectInfo:FindFirstChild("TextLabel") then
                                    if player.Backpack:FindFirstChild("Sack") then
                                        character.Humanoid:EquipTool(player.Backpack:FindFirstChild("Sack"))
                                    end
                                    game.ReplicatedStorage.Remotes.StoreItem:FireServer(item)
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
})


Items:AddToggle({
    Name = "Auto Collect Bonds",
    Flag = "Items/AutoCollectValuableItems",
    Description = "",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoCollectValuableItems then
            getgenv().AutoCollectValuableItems:Disconnect()
            getgenv().AutoCollectValuableItems = nil
        end
        if Value then
            getgenv().AutoCollectValuableItems = game:GetService("RunService").Heartbeat:Connect(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then return end
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not rootPart then return end

                for _, item in ipairs(workspace.RuntimeItems:GetChildren()) do
                    local itemNameList = {"bond"}
                    for _, keyword in ipairs(itemNameList) do
                        if string.find(item.Name:lower(), keyword) then
                            local pos = item:IsA("BasePart") and item.Position or (item:IsA("Model") and item:GetPivot().Position)
                            if not pos and item.PrimaryPart then pos = item.PrimaryPart.Position end
                            if pos and (pos - rootPart.Position).Magnitude <= 17 then
                                if item:FindFirstChild("ObjectInfo") and item.ObjectInfo:FindFirstChild("TextLabel") then
                                    if player.Backpack:FindFirstChild("Sack") then
                                        character.Humanoid:EquipTool(player.Backpack:FindFirstChild("Sack"))
                                    end
                                    game.ReplicatedStorage.Remotes.StoreItem:FireServer(item)
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
})

Setting:AddDropdown({
    Name = "Floating Logo Size",  -- Name of the dropdown
    Flag = "Setting/ButtonSize",  -- Flag for internal use
    Default = "Medium",  -- Default option
    Options = { "Small", "Medium", "Large" },  -- Options for button size
    Callback = function(option)
        -- Check which option is selected and adjust button size accordingly
        if option == "Small" then
            v23.Size = UDim2.new(0, 30, 0, 30)  -- Small size
        elseif option == "Medium" then
            v23.Size = UDim2.new(0, 50, 0, 50)  -- Medium size
        elseif option == "Large" then
            v23.Size = UDim2.new(0, 70, 0, 70)  -- Large size
        end
    end
})

Setting:AddToggle({
    Name = "No Fog",
    Flag = "Settings/NoFog",
    Default = false,
    Callback = function(Value)
        local lighting = game:GetService("Lighting")
        getgenv().FogConnection = getgenv().FogConnection or nil
        getgenv().OriginalFogEnd = getgenv().OriginalFogEnd or lighting.FogEnd
        getgenv().OriginalFogStart = getgenv().OriginalFogStart or lighting.FogStart
        getgenv().OriginalFogColor = getgenv().OriginalFogColor or lighting.FogColor
        getgenv().OriginalAtmosphere = getgenv().OriginalAtmosphere or (lighting:FindFirstChildOfClass("Atmosphere") and lighting:FindFirstChildOfClass("Atmosphere"):Clone())

        local function removeFog()
            if lighting:FindFirstChildOfClass("Atmosphere") then
                lighting:FindFirstChildOfClass("Atmosphere"):Destroy()
            end
            lighting.FogEnd = 1e6
            lighting.FogStart = 1e6
            getgenv().FogConnection = game:GetService("RunService").RenderStepped:Connect(function()
                lighting.FogEnd = 1e6
                lighting.FogStart = 1e6
                if lighting:FindFirstChildOfClass("Atmosphere") then
                    lighting:FindFirstChildOfClass("Atmosphere"):Destroy()
                end
            end)
        end

        local function restoreFog()
            if getgenv().FogConnection then
                getgenv().FogConnection:Disconnect()
                getgenv().FogConnection = nil
            end
            lighting.FogEnd = getgenv().OriginalFogEnd
            lighting.FogStart = getgenv().OriginalFogStart
            lighting.FogColor = getgenv().OriginalFogColor
            if getgenv().OriginalAtmosphere and not lighting:FindFirstChildOfClass("Atmosphere") then
                local restored = getgenv().OriginalAtmosphere:Clone()
                restored.Parent = lighting
            end
        end

        if Value then
            removeFog()
        else
            restoreFog()
        end

        game.Players.LocalPlayer.OnTeleport:Connect(function()
            if getgenv().FogConnection then
                getgenv().FogConnection:Disconnect()
            end
        end)
    end
})


Setting:AddToggle({
    Name = "Full Bright",
    Flag = "Setting/FullBright",
    Description = "Turned On This If It's Night Dark",
    Default = false,
    Callback = function(Value)
        if getgenv().FullBrightConnection then
            getgenv().FullBrightConnection:Disconnect()
            getgenv().FullBrightConnection = nil
        end

        if Value then
            getgenv().FullBrightConnection = game:GetService("RunService").Stepped:Connect(function()
                game.Lighting.Brightness = 3
                game.Lighting.ClockTime = 14
                game.Lighting.FogEnd = 9e9
                game.Lighting.GlobalShadows = false
                game.Lighting.OutdoorAmbient = Color3.fromRGB(128, 128, 128)
            end)
        else
            game.Lighting.Brightness = 1
            game.Lighting.ClockTime = 12
            game.Lighting.FogEnd = 500
            game.Lighting.GlobalShadows = true
            game.Lighting.OutdoorAmbient = Color3.fromRGB(100, 100, 100)
        end
    end
})



getgenv().FpsBoost = false
getgenv().OriginalFpsSettings = {}

Setting:AddToggle({
    Name = "FPS Boost",
    Flag = "Settings/FPSBoost",
    Default = false,
    Callback = function(Value)
        getgenv().FpsBoost = Value
        if Value then
            local Lighting = game:GetService("Lighting")
            getgenv().OriginalFpsSettings.FogEnd = Lighting.FogEnd
            getgenv().OriginalFpsSettings.Brightness = Lighting.Brightness
            getgenv().OriginalFpsSettings.GlobalShadows = Lighting.GlobalShadows
            getgenv().OriginalFpsSettings.Ambient = Lighting.Ambient

            Lighting.FogEnd = 100
            Lighting.Brightness = 0
            Lighting.GlobalShadows = false
            Lighting.Ambient = Color3.fromRGB(0, 0, 0)

            for _, obj in pairs(workspace:GetDescendants()) do
                if obj:IsA("BasePart") then
                    obj.Material = Enum.Material.Plastic
                    obj.Reflectance = 0
                    obj.CastShadow = false
                elseif obj:IsA("Decal") or obj:IsA("Texture") then
                    obj:Destroy()
                end
            end

            for _, v in pairs(Lighting:GetChildren()) do
                if v:IsA("PostEffect") then
                    v.Enabled = false
                end
            end

        else
            local Lighting = game:GetService("Lighting")
            local settings = getgenv().OriginalFpsSettings
            Lighting.FogEnd = settings.FogEnd or 100000
            Lighting.Brightness = settings.Brightness or 2
            Lighting.GlobalShadows = settings.GlobalShadows ~= false
            Lighting.Ambient = settings.Ambient or Color3.fromRGB(128, 128, 128)

            -- Notify that some visuals like decals might not restore
            warn("FPS Boost disabled - some visuals may not return without rejoin.")
        end
    end
})


getgenv().UnlockFPS = false  -- Default state is off

Setting:AddToggle({
    Name = "Unlock FPS to 120",
    Flag = "Setting/UnlockFPS",
    Default = false,
    Callback = function(Value)
        getgenv().UnlockFPS = Value

        if getgenv().UnlockFPS then
            -- Unlock FPS to 120
            game:GetService("UserSettings").GameSettings.MaxFPS = 120
        else
            -- Restore the FPS limit back to the default (60)
            game:GetService("UserSettings").GameSettings.MaxFPS = 60
        end
    end
})

getgenv().AutoCollectValuableItemsConnection = nil

Items:AddToggle({
    Name = "Auto Collect Valuable Items",
    Flag = "Items/AutoCollectValuableItems",
    Description = "Gold, Werewolf, Vampire, Wire, Silver, Cannon, Sheetmetal, Coal, Turret Ammo",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoCollectValuableItemsConnection then
            getgenv().AutoCollectValuableItemsConnection:Disconnect()
            getgenv().AutoCollectValuableItemsConnection = nil
        end

        if Value then
            getgenv().AutoCollectValuableItemsConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then return end
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if not rootPart then return end

                local valuables = {"gold", "silver", "turretammo", "werewolf", "coal", "cannon", "vampire", "sheetmetal", "wire"}

                for _, item in ipairs(workspace.RuntimeItems:GetChildren()) do
                    local isValuable = false
                    for _, name in ipairs(valuables) do
                        if string.find(item.Name:lower(), name) then
                            isValuable = true
                            break
                        end
                    end

                    if isValuable then
                        local itemPosition
                        if item:IsA("BasePart") then
                            itemPosition = item.Position
                        elseif item:IsA("Model") then
                            itemPosition = item:GetPivot().Position
                        elseif item.PrimaryPart then
                            itemPosition = item.PrimaryPart.Position
                        end

                        if itemPosition then
                            local distance = (itemPosition - rootPart.Position).Magnitude
                            if distance <= 17 then
                                if item:FindFirstChild("ObjectInfo") and item.ObjectInfo:FindFirstChild("TextLabel") then
                                    local sack = player.Backpack:FindFirstChild("Sack")
                                    if sack then
                                        character.Humanoid:EquipTool(sack)
                                    end
                                    game.ReplicatedStorage.Remotes.StoreItem:FireServer(item)
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
})


Items:AddToggle({
    Name = "Auto Collect MoneyBag",
    Flag = "Items/AutoCollectMoneyBag",
    Description = "",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoCollectMoneyBagConnection then
            getgenv().AutoCollectMoneyBagConnection:Disconnect()
            getgenv().AutoCollectMoneyBagConnection = nil
        end

        if Value then
            getgenv().AutoCollectMoneyBagConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local moneyBag = workspace:FindFirstChild("RuntimeItems") and workspace.RuntimeItems:FindFirstChild("Moneybag")
                if moneyBag and moneyBag:FindFirstChild("MoneyBag") then
                    local prompt = moneyBag.MoneyBag:FindFirstChild("CollectPrompt")
                    if prompt then
                        prompt.HoldDuration = 0
                        prompt.MaxActivationDistance = 1e3
                        fireproximityprompt(prompt)
                    end
                end
            end)
        end
    end
})

Player:AddDropdown({
    Name = "Select FOV",
    Flag = "Player/FOVDropdown",
    Options = {"60", "100", "120"},
    Default = "100",  -- Default FOV
    Callback = function(Option)
        -- Update the Field of View based on the selected option
        getgenv().CurrentFOV = tonumber(Option)
        game.Workspace.CurrentCamera.FieldOfView = getgenv().CurrentFOV
    end
})

Player:AddToggle({
    Name = "Field of View",
    Flag = "Player/FieldOfView",
    Description = "Smooth View",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Set FOV to 120
            getgenv().CurrentFOV = 100
            game.Workspace.CurrentCamera.FieldOfView = getgenv().CurrentFOV
        else
            -- Set FOV back to 70 (or default)
            getgenv().CurrentFOV = 70
            game.Workspace.CurrentCamera.FieldOfView = getgenv().CurrentFOV
        end
    end
})

Player:AddToggle({
    Name = "NoClip",
    Flag = "Player/NoClip",
    Description = "Toggle NoClip Mode",
    Default = false,
    Callback = function(Value)
        if Value then
            getgenv().NoClipEnabled = true
            while getgenv().NoClipEnabled do
                local character = game.Players.LocalPlayer.Character
                if character and character:FindFirstChild("HumanoidRootPart") then
                    -- Set the character's Humanoid to not be affected by collisions
                    character.HumanoidRootPart.CanCollide = false
                    for _, part in pairs(character:GetChildren()) do
                        if part:IsA("BasePart") then
                            part.CanCollide = false
                        end
                    end
                end
                wait(0.1) -- Wait a little before checking again
            end
        else
            getgenv().NoClipEnabled = false
            local character = game.Players.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                -- Restore collisions when NoClip is turned off
                character.HumanoidRootPart.CanCollide = true
                for _, part in pairs(character:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = true
                    end
                end
            end
        end
    end
})

Player:AddToggle({
    Name = "Infinite Jump",  -- Name of the toggle
    Flag = "Player/InfiniteJump",  -- Flag for internal use
    Default = false,  -- Default state of the toggle
    Callback = function(Value)
        -- Define Infinite Jump functionality
        if Value then
            getgenv().InfiniteJump = game:GetService("UserInputService").JumpRequest:Connect(function()
                -- Trigger the jump when requested
                game.Players.LocalPlayer.Character:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
            end)
        else
            -- Disconnect when the toggle is off
            if getgenv().InfiniteJump then
                getgenv().InfiniteJump:Disconnect()
                getgenv().InfiniteJump = nil
            end
        end
    end
})


Player:AddToggle({
    Name = "Spinbot",
    Flag = "Player/Spinbot",
    Default = false,
    Callback = function(Value)
        if Value then
            getgenv().SpinbotConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local char = game.Players.LocalPlayer.Character
                if char and char:FindFirstChild("HumanoidRootPart") then
                    char.HumanoidRootPart.CFrame *= CFrame.Angles(0, math.rad(10), 0)
                end
            end)
        else
            if getgenv().SpinbotConnection then
                getgenv().SpinbotConnection:Disconnect()
                getgenv().SpinbotConnection = nil
            end
        end
    end
})


Player:AddToggle({
    Name = "Float Sky",
    Flag = "Player/SkyGround",
    Default = false,
    Callback = function(Value)
        if Value then
            getgenv().SkyGroundConnection = game:GetService("RunService").Heartbeat:Connect(function()
                local char = game.Players.LocalPlayer.Character
                if char and char:FindFirstChildWhichIsA("Humanoid") and char:FindFirstChild("HumanoidRootPart") then
                    local hrp = char:FindFirstChild("HumanoidRootPart")
                    if not char:FindFirstChild("SkyGround") then
                        local part = Instance.new("Part")
                        part.Name = "SkyGround"
                        part.Size = Vector3.new(10, 1, 10)
                        part.Anchored = true
                        part.CanCollide = true
                        part.Transparency = 1
                        part.Position = hrp.Position - Vector3.new(0, 3.5, 0)
                        part.Parent = char
                    else
                        char.SkyGround.Position = hrp.Position - Vector3.new(0, 3.5, 0)
                    end
                end
            end)
        else
            if getgenv().SkyGroundConnection then
                getgenv().SkyGroundConnection:Disconnect()
                getgenv().SkyGroundConnection = nil
            end
            local char = game.Players.LocalPlayer.Character
            if char and char:FindFirstChild("SkyGround") then
                char.SkyGround:Destroy()
            end
        end
    end
})


Player:AddToggle({
    Name = "Auto Drive Train",
    Flag = "Player/AutoDriveTrain",
    Description = "Automatically drives the train when sitting",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoDriveTrainConnection then
            getgenv().AutoDriveTrainConnection:Disconnect()
            getgenv().AutoDriveTrainConnection = nil
        end

        if Value then
            getgenv().AutoDriveTrainConnection = game:GetService("RunService").Stepped:Connect(function()
                local lp = game.Players.LocalPlayer
                if lp.Character and lp.Character:FindFirstChild("Humanoid") and lp.Character.Humanoid.Sit then
                    local seat = workspace:FindFirstChild("Train") and workspace.Train:FindFirstChild("TrainControls") and workspace.Train.TrainControls:FindFirstChild("ConductorSeat") and workspace.Train.TrainControls.ConductorSeat:FindFirstChild("VehicleSeat")
                    if seat and seat:FindFirstChild("SeatWeld") then
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, "W", false, game)
                    else
                        game:GetService("VirtualInputManager"):SendKeyEvent(false, "W", false, game)
                    end
                end
            end)
        end
    end
})


Player:AddToggle({
    Name = "Unlock Camera",
    Flag = "Player/UnlockCamera",
    Description = "Unlocks The Camera Third Person View",
    Default = false,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        player.CameraMode = Enum.CameraMode.Classic
        player.CameraMinZoomDistance = 0
        player.CameraMaxZoomDistance = (Value and 120 or 0)
    end
})

Items:AddSection("Automatic Use");

Items:AddToggle({
    Name = "Auto Use Bandage And Snake Oil",
    Flag = "Items/AutoUseBandageAndSnakeOil",
    Description = "Automatically uses Bandage below 60 HP and Snake Oil below 30 HP",
    Default = false,
    Callback = function(Value)
        if getgenv().AutoBandageAndSnakeOil then
            getgenv().AutoBandageAndSnakeOil:Disconnect()
            getgenv().AutoBandageAndSnakeOil = nil
        end

        if Value then
            local success, canUse = pcall(function()
                return not require(game:GetService("ReplicatedStorage").Client.LocalPlayerObjectsContainer)
                    .getPlayerClassData()
                    :hasTag(require(game:GetService("ReplicatedStorage").Shared.DataBanks.ClassEnums).Tag.CannotUseBandage)
            end)

            if success and canUse then
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Heal Enabled",
                    Text = "Auto Bandage & Snake Oil active.",
                    Duration = 4
                })

                getgenv().AutoBandageAndSnakeOil = game:GetService("RunService").Heartbeat:Connect(function()
                    local char = game.Players.LocalPlayer.Character
                    if char and char:FindFirstChild("HumanoidRootPart") and char:FindFirstChild("Humanoid") then
                        local hp = char.Humanoid.Health
                        local bp = game.Players.LocalPlayer.Backpack

                        if hp <= 30 and bp:FindFirstChild("Snake Oil") then
                            bp["Snake Oil"]:WaitForChild("Use"):FireServer(bp["Snake Oil"])
                        elseif hp <= 60 and bp:FindFirstChild("Bandage") then
                            bp.Bandage:WaitForChild("Use"):FireServer()
                        end
                    end
                end)
            else
                game.StarterGui:SetCore("SendNotification", {
                    Title = "Auto Heal Failed",
                    Text = "This class cannot use Bandage.",
                    Duration = 4
                })
            end
        else
            game.StarterGui:SetCore("SendNotification", {
                Title = "Auto Heal Disabled",
                Text = "Bandage & Snake Oil auto-use is off.",
                Duration = 4
            })
        end
    end
})

Items:AddToggle({
    Name = "Auto Use Spam Jump",
    Flag = "Items/AutoSpamJump",
    Default = false,
    Callback = function(Value)
        if Value then
            getgenv().AutoSpamJump = true
            getgenv().AutoSpamJumpConnection = task.spawn(function()
                while getgenv().AutoSpamJump do
                    local char = game.Players.LocalPlayer.Character
                    if char and char:FindFirstChildWhichIsA("Humanoid") and char:FindFirstChildWhichIsA("Humanoid").FloorMaterial ~= Enum.Material.Air then
                        char:FindFirstChildWhichIsA("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                    end
                    task.wait(0.2) -- Adjust for faster/slower jumping
                end
            end)
        else
            getgenv().AutoSpamJump = false
        end
    end
})


Main:AddToggle({
    Name = "ESP Ores",
    Flag = "Main/ESPOres",
    Default = false,
    Callback = function(Value)
        if getgenv().ESPOresConnection then
            for _, v in pairs(getgenv().ESPOresConnection) do
                if typeof(v) == "RBXScriptConnection" then
                    v:Disconnect()
                end
            end
            getgenv().ESPOresConnection = nil
        end

        local Highlight_Folder = game.CoreGui:FindFirstChild("Highlight_Folder_Ores") or Instance.new("Folder")
        Highlight_Folder.Name = "Highlight_Folder_Ores"
        Highlight_Folder.Parent = game.CoreGui

        local function HighlightOres(v)
            local Highlight = Instance.new("Highlight")
            Highlight.Name = v.Name
            Highlight.FillColor = Color3.fromRGB(255, 215, 0)
            Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            Highlight.FillTransparency = 0.7
            Highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
            Highlight.Parent = Highlight_Folder

            local Billboard = Instance.new("BillboardGui")
            Billboard.Name = "ESP_Billboard"
            Billboard.Parent = v
            Billboard.Adornee = v
            Billboard.Size = UDim2.new(0, 25, 0, 25)
            Billboard.StudsOffset = Vector3.new(0, 1, 0)
            Billboard.AlwaysOnTop = true

            local TextLabel = Instance.new("TextLabel")
            TextLabel.Parent = Billboard
            TextLabel.Size = UDim2.new(1, 0, 1, 0)
            TextLabel.Text = v.Name
            TextLabel.TextColor3 = Color3.fromRGB(92, 46, 46)
            TextLabel.TextSize = 10
            TextLabel.BackgroundTransparency = 1
            TextLabel.TextStrokeTransparency = 0
            TextLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)

            if v:IsA("BasePart") then
                Highlight.Adornee = v
            elseif v:IsA("Model") then
                getgenv().ESPOresConnection[v] = v.ChildAdded:Connect(function(_v)
                    if _v:IsA("BasePart") then
                        Highlight.Adornee = _v
                    end
                end)
            end
        end

        if Value then
            getgenv().ESPOresConnection = {}

            for _, v in ipairs(workspace:WaitForChild("Ore"):GetChildren()) do
                if v:IsA("Model") or v:IsA("BasePart") then
                    HighlightOres(v)
                end
            end

            getgenv().ESPOresConnection["Added"] = workspace.Ore.ChildAdded:Connect(function(v)
                if v:IsA("Model") or v:IsA("BasePart") then
                    HighlightOres(v)
                end
            end)

            getgenv().ESPOresConnection["Removed"] = workspace.Ore.ChildRemoved:Connect(function(v)
                if Highlight_Folder:FindFirstChild(v.Name) then
                    Highlight_Folder[v.Name]:Destroy()
                end
                if v:FindFirstChild("ESP_Billboard") then
                    v.ESP_Billboard:Destroy()
                end
                if getgenv().ESPOresConnection[v] then
                    getgenv().ESPOresConnection[v]:Disconnect()
                    getgenv().ESPOresConnection[v] = nil
                end
            end)
        else
            if Highlight_Folder then
                Highlight_Folder:ClearAllChildren()
            end
            for _, v in ipairs(workspace:WaitForChild("Ore"):GetChildren()) do
                if v:FindFirstChild("ESP_Billboard") then
                    v.ESP_Billboard:Destroy()
                end
            end
            if getgenv().ESPOresConnection then
                for _, v in pairs(getgenv().ESPOresConnection) do
                    if typeof(v) == "RBXScriptConnection" then
                        v:Disconnect()
                    end
                end
                getgenv().ESPOresConnection = nil
            end
        end
    end
})

Status:AddSection("Developers List");

Status:AddParagraph({
    Title = "Developers : Viper, Tanny",
    Content = ""
})

Status:AddSection("Discord Support");

Status:AddButton({
    Title = "Join Discord Viper",
    Description = "Click to join our Discord server!",
    Callback = function()
        local discordInvite = "https://discord.gg/qx9rKaC35f"
        setclipboard(discordInvite)
        game:GetService("GuiService"):OpenBrowserWindow(discordInvite)
    end
})

Status:AddButton({
    Title = "Join Discord W-Anti Cheat",
    Description = "Click to join our Discord server!",
    Callback = function()
        local discordInvite = "https://discord.gg/wBgmwTZeae"
        setclipboard(discordInvite)
        game:GetService("GuiService"):OpenBrowserWindow(discordInvite)
    end
})

Status:AddSection("Bypasser");


Status:AddToggle({
    Name = "Bypass Anti Permanent Ban",
    Flag = "Status/BypassAntiBan",
    Default = false
})

Player:AddSection("Teleportation");


Player:AddToggle({
    Name = "Auto Teleport Train",
    Flag = "Player/AutoTeleportTrain",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoTeleportTrainConnection = getgenv().AutoTeleportTrainConnection or nil

        -- Disconnect old connection if it exists
        if getgenv().AutoTeleportTrainConnection then
            getgenv().AutoTeleportTrainConnection:Disconnect()
            getgenv().AutoTeleportTrainConnection = nil
        end

        -- If toggle is enabled, teleport automatically
        if Value then
            local player = game.Players.LocalPlayer
            local character = player.Character
            local train = workspace:FindFirstChild("Train")

            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 and train then
                local seat = train:FindFirstChild("TrainControls") and train.TrainControls:FindFirstChild("ConductorSeat") and train.TrainControls.ConductorSeat:FindFirstChild("VehicleSeat")

                if seat then
                    -- Teleport to the Conductor Seat
                    character:SetPrimaryPartCFrame(seat.CFrame + Vector3.new(0, 3, 0))
                end
            end
        end
    end
})


Player:AddToggle({
    Name = "Auto Teleport to Gold",
    Flag = "Player/AutoTeleportGold",
    Description = "Automatically teleport to the Gold in Dead Rails when enabled.",
    Default = false,
    Callback = function(Value)
        getgenv().AutoTeleportGoldConnection = getgenv().AutoTeleportGoldConnection or nil

        -- Disconnect old connection if it exists
        if getgenv().AutoTeleportGoldConnection then
            getgenv().AutoTeleportGoldConnection:Disconnect()
            getgenv().AutoTeleportGoldConnection = nil
        end

        -- If toggle is enabled, teleport automatically
        if Value then
            local player = game.Players.LocalPlayer
            local character = player.Character
            local goldPart = workspace.RuntimeItems:FindFirstChild("GoldBar") and workspace.RuntimeItems.GoldBar:FindFirstChild("Prop_GoldBar")

            if character and character:FindFirstChild("Humanoid") and character.Humanoid.Health > 0 and goldPart then
                -- Teleport to the Gold part (Prop_GoldBar)
                character:SetPrimaryPartCFrame(goldPart.CFrame + Vector3.new(0, 3, 0))  -- Adjust Y (height) if necessary
            end
        end
    end
})


Player:AddSection("Anti Slow");

-- Slider: WalkSpeed Amount
Player:AddSlider({
    Name = "Walkspeed",
    Flag = "Player/SpeedMultiplier",
    Description = "Speed Multiplier",
    Range = {1, 5},
    Suffix = "×",
    CurrentValue = 1.5,
    Increment = 0.1,
    Callback = function(Value)
        _G.SpeedMultiplier = Value
    end,
})

-- Initialize variables
_G.SpeedBoost = false
_G.SpeedMultiplier = 1.5

-- Create a spoofed humanoid to trick anti-cheat
local function setupSpeedBypass()
    pcall(function()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        
        -- Create a hook for the Humanoid.WalkSpeed property
        local oldIndex = nil
        local defaultWalkSpeed = humanoid.WalkSpeed
        
        oldIndex = hookmetamethod(game, "__index", function(self, key)
            if not checkcaller() and self == humanoid and key == "WalkSpeed" then
                -- Return the default speed to the game/anti-cheat checks
                return defaultWalkSpeed
            end
            return oldIndex(self, key)
        end)
        
        -- Create a hook for when the game tries to set the walkspeed
        local oldNewIndex = nil
        oldNewIndex = hookmetamethod(game, "__newindex", function(self, key, value)
            if not checkcaller() and self == humanoid and key == "WalkSpeed" then
                -- Let the game think it's setting the walkspeed
                defaultWalkSpeed = value
                return oldNewIndex(self, key, value)
            end
            return oldNewIndex(self, key, value)
        end)
    end)
end

-- Try to apply speed in a different way that might bypass detection
task.spawn(function()
    setupSpeedBypass()
    
    while true do
        if _G.SpeedBoost then
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                if character and character:FindFirstChild("Humanoid") then
                    local humanoid = character:FindFirstChild("Humanoid")
                    
                    -- Apply speed through normal walkspeed (now protected by our metatable hooks)
                    if humanoid then
                        -- Get the default value from the game
                        local defaultSpeed = humanoid.WalkSpeed
                        -- Apply our multiplier using the protected setter
                        humanoid.WalkSpeed = defaultSpeed * _G.SpeedMultiplier
                    end
                end
            end)
        end
        task.wait(0.1) -- Run less frequently to avoid detection
    end
end)

-- Respawn handler
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    setupSpeedBypass()
end)

Player:AddToggle({
    Name = "Enable Walkspeed",
    Flag = "Player/SpeedBoost",
    Description = "More subtle speed increase",
    Default = false,
    Callback = function(Value)
        _G.SpeedBoost = Value
        if not Value then
            -- Reset speed modification when disabled
            local char = game.Players.LocalPlayer.Character
            if char and char:FindFirstChild("Humanoid") then
                char:FindFirstChild("Humanoid").WalkSpeed = 16 -- Default Roblox walkspeed
            end
        end
    end,
})


-- Notify Random Buildings
Notify:AddToggle({
    Name = "Notify Random Buildings",
    Flag = "Notify/NotifyHouse",
    Default = false,
    Callback = function(NotifyHouseValue)
        getgenv().NotifyHouse = NotifyHouseValue
        if getgenv().NotifyHouse then
            workspace.RandomBuildings.ChildAdded:Connect(function(_v)
                if _v:IsA("Model") then
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = _v.Name .. " was found",
                        Text = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - workspace.RandomBuildings[_v.Name].WorldPivot.Position).Magnitude) .. "m away",
                        Duration = 5
                    })
                end
            end)
        end
    end
})

-- Notify Town
Notify:AddToggle({
    Name = "Notify Town",
    Flag = "Notify/NotifyTown",
    Default = false,
    Callback = function(NotifyHouseValue)
        getgenv().NotifyTown = NotifyHouseValue
        if getgenv().NotifyTown then
            workspace.Towns.ChildAdded:Connect(function(v)
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = v.Name .. " was found",
                    Text = "",
                    Duration = 5
                })
            end)
        else
            workspace.Towns.ChildAdded:Connect(function() return end)
        end
    end
})

-- Notify Sterling
Notify:AddToggle({
    Name = "Notify Sterling",
    Flag = "Notify/NotifySterling",
    Default = false,
    Callback = function(NotifyHouseValue)
        getgenv().NotifySterling = NotifyHouseValue
        if getgenv().NotifySterling then
            workspace.ChildAdded:Connect(function(v)
                if v.Name == "Sterling" then
                    game:GetService("StarterGui"):SetCore("SendNotification", {
                        Title = "Found Sterling",
                        Text = "",
                        Duration = 5
                    })
                end
            end)
        else
            workspace.ChildAdded:Connect(function() return end)
        end
    end
})

-- Notify Bank Code
Notify:AddToggle({
    Name = "Notify Bank code",
    Flag = "Notify/NotifyBankCode",
    Default = false,
    Callback = function(_v2)
        getgenv().NotifyBankCode = _v2
        if getgenv().NotifyBankCode then
            workspace.RuntimeItems.ChildAdded:Connect(function(v)
                if v.Name == "BankCombo" then
                    v.ChildAdded:Connect(function()
                        if v.BankCombo.SurfaceGui.TextLabel then
                            game:GetService("StarterGui"):SetCore("SendNotification", {
                                Title = "Bank Key Code:",
                                Text = v.BankCombo.SurfaceGui.TextLabel.Text,
                                Duration = 10
                            })
                        end
                    end)
                end
            end)
        end
    end
})

-- Notify Outlaw
Notify:AddToggle({
    Name = "Notify Outlaw",
    Flag = "Notify/NotifyOutlaw",
    Default = false,
    Callback = function(_v2)
        getgenv().NotifyOutlaw = _v2
        if getgenv().NotifyOutlaw then
            for i, _v in ipairs(workspace.Baseplates.Baseplate.CenterBaseplate:GetChildren()) do
                if _v.Name == "Animals" and _v.ClassName == "Folder" then
                    for _, v in ipairs(_v:GetChildren()) do
                        if string.find(v.Name:lower(), "outlaw") then
                            game:GetService("StarterGui"):SetCore("SendNotification", {
                                Title = "Found Cowboy/Outlaw:",
                                Text = "Careful",
                                Subtext = v.Name,
                                Duration = 5
                            })
                        end
                    end
                end
            end
            workspace.Baseplates.Baseplate.CenterBaseplate.ChildAdded:Connect(function(_v)
                if _v.Name == "Animals" and _v.ClassName == "Folder" then
                    for _, v in ipairs(_v:GetChildren()) do
                        if string.find(v.Name:lower(), "outlaw") then
                            game:GetService("StarterGui"):SetCore("SendNotification", {
                                Title = "Found Cowboy/Outlaw:",
                                Text = "Careful",
                                Subtext = _v.Name,
                                Duration = 5
                            })
                        end
                    end
                end
            end)
        end
    end
})
