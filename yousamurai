repeat wait() until game:IsLoaded() and game.Players and game.Players.LocalPlayer

-- Wait for the key to be set by the loader (max 15 seconds)
local timeout = 15
local elapsed = 0
while not getgenv().Key do
    wait(0.1)
    elapsed += 0.1
    if elapsed >= timeout then break end
end

-- Show what the key is (for debugging - optional)
print("Entered Key:", getgenv().Key)

-- Check the key
if getgenv().Key ~= "ILOVEVIPER766541" then
    game.Players.LocalPlayer:Kick("Wrong Key Lol")
    return
end



local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/newredz/RedzLibV5/main/Source.lua"))()

-- Wait until the library is fully loaded
repeat task.wait() until redzlib

-- Create the window
local Window = redzlib:MakeWindow({
    Title = "nova Hub : Lifting Simulator",
    SubTitle = "by Viper",
    SaveFolder = "redz Hub | Blox Fruits.lua"
})

local Discord = Window:MakeTab({
    Title = "Information",
    Description = "Info",
    Icon = "Info",  -- Fixed the split "Icon"
})


local Main = Window:MakeTab({
    Title = "Main",
    Description = "Info",
    Icon = "home",  -- Fixed the split "Icon"
})

local Bloodlines = Window:MakeTab({
    Title = "Bloodlines",
    Description = "palm",
    Icon = "swords",  -- Fixed the split "Icon"
})


local Teleport = Window:MakeTab({
    Title = "Teleport",
    Description = "palm",
    Icon = "palm",  -- Fixed the split "Icon"
})


local v22 = Instance.new("ScreenGui")
local v23 = Instance.new("ImageButton")
local v25 = Instance.new("ParticleEmitter")
local v26 = game:GetService("TweenService")

v22.Name = "RedzToggleUI"
v22.Parent = game.CoreGui
v22.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

v23.Name = "OpenToggle"
v23.Parent = v22
v23.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
v23.BorderSizePixel = 0
v23.Position = UDim2.new(0.1, 0, 0.1, 0)
v23.Size = UDim2.new(0, 35, 0, 35)
v23.Image = "rbxassetid://123448871674913"
v23.Draggable = true

v25.Parent = v23
v25.LightEmission = 1
v25.Size = NumberSequence.new({
    NumberSequenceKeypoint.new(0, 0.1),
    NumberSequenceKeypoint.new(1, 0)
})
v25.Lifetime = NumberRange.new(0.5, 1)
v25.Rate = 0
v25.Speed = NumberRange.new(5, 10)
v25.Color = ColorSequence.new(Color3.fromRGB(255, 85, 255), Color3.fromRGB(85, 255, 255))

v23.MouseButton1Down:Connect(function()
    v25.Rate = 100

    if Window.Enabled then
        Window:Minimize(true)
    else
        Window:Minimize(false)
    end

    task.delay(1, function()
        v25.Rate = 0
    end)
end)

local entranceTween = v26:Create(v23, TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), {
    Position = UDim2.new(0.1, 0, 0.1, 0),
    Size = UDim2.new(0, 35, 0, 35),
    BackgroundTransparency = 0.2
})
entranceTween:Play()



Discord:AddDiscordInvite({
    Name = "nova Hub | Community",
    Description = "Join our discord community to receive information about the next update",
    Logo = "rbxassetid://120931314112734", -- Check if this ID is correct and exists
    Invite = "https://discord.gg/brrYwzpWg7"
})

Main:AddSection("Main UI")

Main:AddDropdown({
    Name = "UI Size",
    Flag = "Main/UISize",
    Default = "Normal",
    Options = { "Normal", "Smaller" },
    Callback = function(option)
        local newSizeX, newSizeY
        if option == "Normal" then
            newSizeX, newSizeY = 550, 380
        elseif option == "Smaller" then
            newSizeX, newSizeY = 450, 320
        end
        
        -- Update the saved UI size values
        redzlib.Save.UISize = {newSizeX, newSizeY}
        
        -- Find the main frame and update its size
        local mainFrame = ScreenGui:FindFirstChild("Hub")
        if mainFrame then
            mainFrame.Size = UDim2.fromOffset(newSizeX, newSizeY)
            mainFrame.Position = UDim2.new(0.5, -newSizeX/2, 0.5, -newSizeY/2)
        end
        
        -- If you need to adjust tab sizes as well, you'll need to locate the tab container
        -- This part depends on how your tabs are organized
        local tabContainer = mainFrame:FindFirstChild("TabContainer") or mainFrame:FindFirstChild("Components"):FindFirstChild("Tabs")
        if tabContainer then
            local tabSize = option == "Normal" and 160 or 140
            for _, tab in pairs(tabContainer:GetChildren()) do
                if tab:IsA("TextButton") or tab:IsA("Frame") then
                    tab.Size = UDim2.new(0, tabSize, 0, 30)
                end
            end
        end
    end
})

Main:AddSection("Main Farm")

Main:AddToggle({
    Name = "Auto Gain Muscle",
    Flag = "Main/AutoGainMuscle",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoGainMuscle = Value
        print("AutoGainMuscle toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoGainMuscle do
                    local args = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                    task.wait(0.1) -- Adjust delay if needed
                end
            end)
        end
    end
})



Main:AddToggle({
    Name = "Auto Buy Weight",
    Flag = "Items/AutoBuyWeight",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyWeight = Value
        print("AutoBuyWeight toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoBuyWeight do
                    for i = 1, 20 do
                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Income_Item",
                                [3] = "Weight",
                                [4] = i
                            }
                        }
                        print("Trying to buy Weight index:", i)
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.2)
                    end
                    task.wait(1) -- Give the server a small break
                end
            end)
        end
    end
})



Main:AddToggle({
    Name = "Auto Buy Bag",
    Flag = "Items/AutoBuyBag",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyBag = Value
        print("AutoBuyBag toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoBuyBag do
                    for i = 1, 20 do
                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "Bag",
                                [4] = i
                            }
                        }
                        print("Trying to buy Bag index:", i)
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.2)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})


Main:AddToggle({
    Name = "Auto Buy Rebirth",
    Flag = "Items/AutoBuyRebirth",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoBuyRebirth = Value
        print("AutoBuyRebirth toggled:", Value)

        if Value then
            task.spawn(function()
                while getgenv().AutoBuyRebirth do
                    for i = 1, 20 do
                        local args = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Rebirth_Item",
                                [3] = "Rebirth",
                                [4] = i
                            }
                        }
                        print("Trying to buy Rebirth index:", i)
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                        task.wait(0.2)
                    end
                    task.wait(1)
                end
            end)
        end
    end
})

Main:AddSection("Kaitun Farm")


Main:AddToggle({
    Name = "Auto Gain + Sell + Buy All",
    Flag = "Main/AutoEverything",
    Description = "Kaitun, Weight, DNA, Rebirth Lol",
    Default = false,
    Callback = function(Value)
        getgenv().AutoEverything = Value
        
        if Value then
            task.spawn(function()
                while getgenv().AutoEverything and task.wait() do
                    -- Gain Muscle
                    local argsGain = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsGain))
                    
                    -- Wait a bit
                    task.wait(0.2)
                    
                    -- Sell Muscle
                    local argsSell = {
                        [1] = {
                            [1] = "SellMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsSell))
                    
                    -- Try to buy best weight
                    for i = 100, 1, -1 do
                        local argsWeight = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Income_Item",
                                [3] = "Weight",
                                [4] = i
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsWeight))
                    end
                    
                    -- Try to buy best bag
                    for i = 100, 1, -1 do
                        local argsBag = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Bag_Item",
                                [3] = "Bag",
                                [4] = i
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsBag))
                    end
                    
                    -- Try to buy best rebirth item
                    for i = 100, 1, -1 do
                        local argsRebirth = {
                            [1] = {
                                [1] = "BuyItem",
                                [2] = "Rebirth_Item",
                                [3] = "Rebirth",
                                [4] = i
                            }
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsRebirth))
                    end
                    
                    -- Wait a bit before next cycle
                    task.wait(0.3)
                end
            end)
        end
    end
})



Main:AddToggle({
    Name = "Auto Gain + Sell Muscle",
    Flag = "Main/AutoGainAndSellMuscle",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoGainAndSellMuscle = Value
        
        if Value then
            task.spawn(function()
                while getgenv().AutoGainAndSellMuscle and task.wait() do
                    -- Gain Muscle
                    local argsGain = {
                        [1] = {
                            [1] = "GainMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsGain))
                    
                    -- Wait a bit
                    task.wait(0.2)
                    
                    -- Sell Muscle (without checking status)
                    local argsSell = {
                        [1] = {
                            [1] = "SellMuscle"
                        }
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(argsSell))
                    
                    -- Wait a bit after selling
                    task.wait(0.3)
                end
            end)
        end
    end
})



Main:AddToggle({
    Name = "Kaitun Sell Muscle (Soon)",
    Flag = "Main/AutoSellMuscle",
    Description = "Sell Muscle If Full Bag",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellMuscle = Value

        if Value then
            task.spawn(function()
                while getgenv().AutoSellMuscle do
                    local statusLabel = game:GetService("Players").LocalPlayer
                        .PlayerGui.Main_Gui.DataMenu_Frame.Muscle.Status

                    if statusLabel and statusLabel.Text then
                        local current, max = statusLabel.Text:match("(%d+)%s*/%s*(%d+)")
                        current, max = tonumber(current), tonumber(max)

                        if current and max and current >= max then
                            local args = {
                                [1] = {
                                    [1] = "SellMuscle"
                                }
                            }
                            game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                            print("Auto sold muscle - bag full:", current, "/", max)
                        end
                    end

                    task.wait(0.5)
                end
            end)
        end
    end
})

Main:AddToggle({
    Name = "Auto Sell Muscle",
    Flag = "Items/AutoSellMuscle",
    Description = "",
    Default = false,
    Callback = function(Value)
        getgenv().AutoSellMuscle = Value

        if Value then
            task.spawn(function()
                while getgenv().AutoSellMuscle do
                    local args = {
                        [1] = { [1] = "SellMuscle" }
                    }

                    game:GetService("ReplicatedStorage"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
                    task.wait(1)
                end
            end)
        end
    end
})


Main:AddSection("Anti Slow")

Main:AddSlider({
    Name = "WalkSpeed",
    Flag = "Settings/WalkSpeed",
    Min = 16,  -- Default Roblox walkspeed
    Max = 1500,  -- Adjust the max speed as needed
    Default = 16,  -- Default value for walkspeed
    Increment = 1,  -- Step value for the slider
    Description = "",
    Callback = function(value)
        _G.CustomWalkSpeed = value  -- Store the value globally
        
        -- Only apply if the toggle is enabled
        if _G.WalkSpeedEnabled then
            -- Try multiple approaches to bypass anti-cheat
            local character = game:GetService("Players").LocalPlayer.Character
            if character then
                -- Method 1: Direct approach with pcall to avoid errors
                pcall(function()
                    character:WaitForChild("Humanoid").WalkSpeed = value
                end)
                
                -- Method 2: Use RunService for continuous application
                -- This helps bypass anti-cheats that reset walkspeed
                if not _G.WalkSpeedLoop then
                    _G.WalkSpeedLoop = true
                    spawn(function()
                        while _G.WalkSpeedEnabled and wait() do
                            if character and character:FindFirstChild("Humanoid") then
                                character.Humanoid.WalkSpeed = _G.CustomWalkSpeed
                            end
                        end
                    end)
                end
            end
        end
    end
})

Main:AddToggle({
    Name = "Enable WalkSpeed",
    Flag = "Settings/EnableWalkSpeed",
    Description = "",
    Default = false,
    Callback = function(enabled)
        _G.WalkSpeedEnabled = enabled
        
        if enabled then
            -- Apply the stored walkspeed value
            local walkspeed = _G.CustomWalkSpeed or 16  -- Default WalkSpeed if not set
            
            -- Start a loop that continuously sets the walkspeed
            -- This helps bypass anti-cheats that reset values
            if not _G.WalkSpeedLoop then
                _G.WalkSpeedLoop = true
                spawn(function()
                    while _G.WalkSpeedEnabled and wait() do
                        local character = game:GetService("Players").LocalPlayer.Character
                        if character and character:FindFirstChild("Humanoid") then
                            character.Humanoid.WalkSpeed = _G.CustomWalkSpeed
                        end
                    end
                end)
            end
        else
            -- Disable the loop and reset walkspeed
            _G.WalkSpeedLoop = false
            local character = game:GetService("Players").LocalPlayer.Character
            if character and character:FindFirstChild("Humanoid") then
                character.Humanoid.WalkSpeed = 16  -- Reset to default
            end
        end
    end
})

-- Add a connection to handle character respawning
game:GetService("Players").LocalPlayer.CharacterAdded:Connect(function(character)
    wait(1)  -- Give time for the character to fully load
    if _G.WalkSpeedEnabled and _G.CustomWalkSpeed then
        character:WaitForChild("Humanoid").WalkSpeed = _G.CustomWalkSpeed
    end
end)



Teleport:AddDropdown({
    Name = "Smoothness",
    Flag = "Main/UISize",
    Default = "Normal",
    Options = { "Normal", "Smooth" },
    Callback = function(option)
        local newSizeX, newSizeY
        if option == "Normal" then
            newSizeX, newSizeY = 550, 380
        elseif option == "Smaller" then
            newSizeX, newSizeY = 450, 320
        end
        
        -- Update the saved UI size values
        redzlib.Save.UISize = {newSizeX, newSizeY}
        
        -- Find the main frame and update its size
        local mainFrame = ScreenGui:FindFirstChild("Hub")
        if mainFrame then
            mainFrame.Size = UDim2.fromOffset(newSizeX, newSizeY)
            mainFrame.Position = UDim2.new(0.5, -newSizeX/2, 0.5, -newSizeY/2)
        end
        
        -- If you need to adjust tab sizes as well, you'll need to locate the tab container
        -- This part depends on how your tabs are organized
        local tabContainer = mainFrame:FindFirstChild("TabContainer") or mainFrame:FindFirstChild("Components"):FindFirstChild("Tabs")
        if tabContainer then
            local tabSize = option == "Normal" and 160 or 140
            for _, tab in pairs(tabContainer:GetChildren()) do
                if tab:IsA("TextButton") or tab:IsA("Frame") then
                    tab.Size = UDim2.new(0, tabSize, 0, 30)
                end
            end
        end
    end
})


Teleport:AddSection("Teleportation")

Teleport:AddToggle({
    Name = "Teleport 1st Stage",
    Flag = "Teleport/To1stStage",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(3427.74853515625, -51.910560607910156, 1934.411865234375)
        end
    end
})


Teleport:AddToggle({
    Name = "Teleport 2nd Stage",
    Flag = "Teleport/To2ndIsland",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(6039.3310546875, -51.910560607910156, 2103.028564453125)
        end
    end
})


Teleport:AddToggle({
    Name = "Teleport 3rd Stage",
    Flag = "Teleport/To3rdIsland",
    Default = false,
    Callback = function(Value)
        if Value then
            local plr = game.Players.LocalPlayer
            local char = plr.Character or plr.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = CFrame.new(8773.9248046875, -51.910560607910156, 2032.6875)
        end
    end
})



Bloodlines:AddToggle({
    Name = "Auto Farm Boss 1",
    Flag = "Main/AutoFarmBoss1",
    Description = "Teleports to Boss 1 and auto farms using Fist and Foot",
    Default = false,
    Callback = function(Value)
        getgenv().AutoFarmBoss1 = Value

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        task.spawn(function()
            while getgenv().AutoFarmBoss1 do
                local character = LocalPlayer.Character
                local backpack = LocalPlayer.Backpack
                local hrp = character and character:FindFirstChild("HumanoidRootPart")

                -- Teleport to Boss 1 spawn area
                if hrp then
                    hrp.CFrame = CFrame.new(2144.50415, -4.76272964, 1889.84302, 0.10488975, 0, 0.994483829, 0, 1, 0, -0.994483829, 0, 0.10488975)
                end

                -- Auto equip and click Fist
                local fist = backpack:FindFirstChild("Fist") or (character and character:FindFirstChild("Fist"))
                if fist then
                    pcall(function()
                        if fist.Parent == backpack then
                            fist.Parent = character
                            task.wait(0.1)
                        end
                        if fist.Activate then
                            fist:Activate()
                        end
                    end)
                end

                task.wait(0.3)

                -- Auto equip and click Foot
                local foot = backpack:FindFirstChild("Foot") or (character and character:FindFirstChild("Foot"))
                if foot then
                    pcall(function()
                        if foot.Parent == backpack then
                            foot.Parent = character
                            task.wait(0.1)
                        end
                        if foot.Activate then
                            foot:Activate()
                        end
                    end)
                end

                task.wait(0.3)
            end
        end)
    end
})


Bloodlines:AddToggle({
    Name = "Auto Farm Boss 2",
    Flag = "Main/AutoFarmBoss2",
    Description = "Teleports to Boss 2 and auto farms using Fist and Foot",
    Default = false,
    Callback = function(Value)
        getgenv().AutoFarmBoss2 = Value

        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        task.spawn(function()
            while getgenv().AutoFarmBoss2 do
                local character = LocalPlayer.Character
                local backpack = LocalPlayer.Backpack
                local hrp = character and character:FindFirstChild("HumanoidRootPart")

                -- Teleport to Boss 2 location
                if hrp then
                    hrp.CFrame = CFrame.new(4795.99854, -1.87442207, 1828.09326, 1, 0, 0, 0, 1, 0, 0, 0, 1)
                end

                -- Auto equip and click Fist
                local fist = backpack:FindFirstChild("Fist") or (character and character:FindFirstChild("Fist"))
                if fist then
                    pcall(function()
                        if fist.Parent == backpack then
                            fist.Parent = character
                            task.wait(0.1)
                        end
                        if fist.Activate then
                            fist:Activate()
                        end
                    end)
                end

                task.wait(0.3)

                -- Auto equip and click Foot
                local foot = backpack:FindFirstChild("Foot") or (character and character:FindFirstChild("Foot"))
                if foot then
                    pcall(function()
                        if foot.Parent == backpack then
                            foot.Parent = character
                            task.wait(0.1)
                        end
                        if foot.Activate then
                            foot:Activate()
                        end
                    end)
                end

                task.wait(0.3)
            end
        end)
    end
})
